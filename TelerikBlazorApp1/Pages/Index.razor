@page "/"
@using System.ComponentModel


<TelerikGrid @ref="@Grid"
             Data="@Data"
             EditMode="@GridEditMode.Incell"
             Resizable="true"
             Width="100%"
             Height="100%"
             Reorderable="true"
             Groupable="false"
             OnRead="@ReadItems"
             OnEdit="@EditItem"
             ShowColumnMenu="true"
             FilterMode="@GridFilterMode.FilterMenu"
             Sortable="true">
    <GridColumns>
        <GridColumn>
            <Template>
                <span>@((context as IViewModel).Id)</span>
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(IViewModel.Name) Editable="true">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Name
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Name"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="dummy" Editable="true" Title="Child Name">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Child.ChildName
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Child.ChildName"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        @* binding to child property with one level interface is supported  *@
        <GridColumn Field="Child.ChildAmount" Editable="true" Title="Child Amount">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Child.ChildAmount
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikNumericTextBox @bind-Value="row.Child.ChildAmount"></TelerikNumericTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="dummy" Editable="true" Title="Accounts[0].Account">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Accounts[0].Account
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Accounts[0].Account"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Editable="true" Title="Name2 (empty field param)">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Name2
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Name2"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
            <FooterTemplate>
                <span>@(string.Join('|', Data.Select(d => d.Name2)))</span>
            </FooterTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(ViewModel.Age) Editable="true">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Age
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikNumericTextBox @bind-Value="row.Age"></TelerikNumericTextBox>
                    </div>
                }
            </EditorTemplate>
            <FooterTemplate>
                Total: <span>@(Data.Select(d => d.Age).Sum().ToString())</span>
            </FooterTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(ViewModel.Name3) Editable="true">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Name3
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Name3"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(ViewModel.Name4) Editable="false">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Name4
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(ViewModel.Name5) Editable="false">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Name5
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>


@code {
    private const int RowHeight = 40;
    private const string Height = "700px";
    private const int PageSize = 20;

    private List<IViewModel> VisibleData;

    private List<IViewModel> Data { get; set; } = new List<IViewModel>();
    private MyContainer myContainer;

    private TelerikGrid<IViewModel> Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var coll1 = new List<IViewModel> { new ViewModel("Test") { Name2 = "1" }, new ViewModel("Test") { Name2 = "2" }, new ViewModel("Test") { Name2 = "3" }, new ViewModel2("Test 2") { Name2 = "new" } };

        Data = coll1;

        myContainer = new MyContainer(coll1);

        await base.OnInitializedAsync();
    }

    private void EditItem(GridCommandEventArgs args)
    {
        var tradeRowViewModel = args.Item as IViewModel;

        // not supported
        var state = Grid.GetState();
        state.EditItem = tradeRowViewModel;
        state.OriginalEditItem = tradeRowViewModel;
        state.InsertedItem = null;
        //   state.EditField = args.;
        Grid.SetState(state);
    }

    protected void ReadItems(GridReadEventArgs args)
    {
        UpdateData(args.Request);
    }

    private void UpdateData(Telerik.DataSource.DataSourceRequest request)
    {
        VisibleData = Data.Skip(request.Skip).Take(request.PageSize).ToList();
    }

    public class ViewModel : IViewModel
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private string name2;
        // not a parameterless constructor, you must add one.
        // for example

        //public ViewModel()
        //{

        //}

        public object dummy { get; set; }

        public ViewModel(string someService)
        {
            Id = someService.GetHashCode().ToString();
        }


        public string Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Name2
        {
            get { return name2; }
            set { name2 = value; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Name2")); }
        }
        public string Name3 { get; set; }
        public string Name4 => $" {Name2} and {Name3}";
        public string Name5 { get; set; }
        public IChildViewModel Child { get; set; } = new ChildViewModel();
        public List<RepeatAccount> Accounts { get; } = new List<RepeatAccount> { new RepeatAccount { Account = "Account1" }, new RepeatAccount { Account = "Account2" } };
    }

    public class ViewModel2 : IViewModel
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private string name2;
        // not a parameterless constructor, you must add one.
        // for example

        //public ViewModel2()
        //{

        //}

        public ViewModel2(string someService)
        {
            Id = someService.GetHashCode().ToString();
        }

        public object dummy { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Name2
        {
            get { return name2; }
            set
            {
                if (name2 != value)
                {
                    name2 = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Name2"));
                }
            }
        }
        public string Name3 { get; set; }
        public string Name4 => $" {Name2} and {Name3}";
        public string Name5 { get; set; }
        public IChildViewModel Child { get; set; } = new ChildViewModel();
        public List<RepeatAccount> Accounts { get; } = new List<RepeatAccount> { new RepeatAccount { Account = "Account1" }, new RepeatAccount { Account = "Account2" } };
    }

    public interface IViewModel : INotifyPropertyChanged, IBaseViewModel
    {
        object dummy { get; set; }
        int Age { get; set; }
        string Name2 { get; set; }
        string Name3 { get; set; }
        string Name4 { get; }
        string Name5 { get; set; }
        IChildViewModel Child { get; set; }
        List<RepeatAccount> Accounts { get; }
    }

    public interface IBaseViewModel
    {
        string Id { get; set; }
        string Name { get; set; }
    }

    public class MyContainer
    {
        public MyContainer(List<IViewModel> viewModels)
        {
            this.viewModels = viewModels;
            foreach (var item in this.viewModels)
            {
                item.PropertyChanged += OnItemPropertyChangedHandler;
            }
        }

        private void OnItemPropertyChangedHandler(object viewModel, PropertyChangedEventArgs args)
        {
            var changedItem = viewModel as IViewModel;

            foreach (var item in this.viewModels)
            {
                item.Name5 = changedItem.Name2;
            }
        }

        private List<IViewModel> viewModels;
    }

    public class ChildViewModel : IChildViewModel
    {
        public int ChildAmount { get; set; }
        public string ChildName { get; set; }
    }

    public interface IChildViewModel : IBaseChildViewModel
    {
        public int ChildAmount { get; set; }
    }

    public interface IBaseChildViewModel
    {
        public string ChildName { get; set; }
    }

    public class RepeatAccount
    {
        public string Account { get; set; }
    }
}

