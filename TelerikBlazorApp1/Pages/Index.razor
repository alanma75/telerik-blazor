@page "/"
@using TelerikBlazorApp1.Data

<span>use enhanced expression to support field binding. </span> <TelerikCheckBox @bind-Value="@useEnhanced"></TelerikCheckBox>
<br />
<span>Name - this is indirectly on row viewmodel's grandparent interface</span><br />
@($" {GetFieldIdentifier("Name")}")<br />
<span>Child Amount - this is indirectly on child class's interface</span><br />
@($" {GetFieldIdentifier("Child.ChildAmount")}")<br />

<span>Child.ChildName - this is indirectly on child class's grandparent interface</span><br />
@($" {GetFieldIdentifier("Child.ChildName")}")<br />
<span>Accounts[0].Account - this is child collection's property</span><br />
@($" {GetFieldIdentifier("Accounts[0].Account")}")<br />
<br />

<TelerikGrid @ref="@Grid"
             Data="@Data"
             EditMode="@GridEditMode.Incell"
             Resizable="true"
             Width="100%"
             Height="100%"
             Reorderable="true"
             Groupable="false"
             OnEdit="@EditItem"
             ShowColumnMenu="true"
             FilterMode="@GridFilterMode.FilterMenu"
             Sortable="true">
    <GridColumns>
        <GridColumn Field="Id">
            <Template>
                <span>@((context as IViewModel).Id)</span>
            </Template>
        </GridColumn>
        <GridColumn Field="Child.ChildName" Editable="true" Title="Child Name">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Child.ChildName
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Child.ChildName"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="Child.ChildAmount" Editable="true" Title="Child Amount">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Child.ChildAmount
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikNumericTextBox @bind-Value="row.Child.ChildAmount"></TelerikNumericTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="Accounts[0].Account" Editable="true" Title="Accounts[0].Account">
            <Template>
                @{
                    var row = context as IViewModel;
                    <div>
                        @row.Accounts[0].Account
                    </div>
                }
            </Template>
            <EditorTemplate>
                @{
                    var row = context as IViewModel;
                    <div>
                        <TelerikTextBox @bind-Value="row.Accounts[0].Account"></TelerikTextBox>
                    </div>
                }
            </EditorTemplate>
        </GridColumn>
    </GridColumns>
</TelerikGrid>

@code{
    private TelerikGrid<IViewModel> Grid { get; set; }

    private List<IViewModel> Data { get; set; } = new List<IViewModel>();

    private bool useEnhanced;

    protected override async Task OnInitializedAsync()
    {
        Data = ViewModelService.GetData();

        await base.OnInitializedAsync();
    }

    private void EditItem(GridCommandEventArgs args)
    {
        var tradeRowViewModel = args.Item as IViewModel;

        // not supported
        var state = Grid.GetState();
        state.EditItem = tradeRowViewModel;
        state.OriginalEditItem = tradeRowViewModel;
        state.InsertedItem = null;
        //   state.EditField = args.;
        Grid.SetState(state);
    }

    private string GetFieldIdentifier(string fieldpath)
    {
        try
        {
            var exp = useEnhanced ? Data[0].GetNestedExpressionEnhanced<object>(fieldpath) : Data[0].GetNestedExpression<object>(fieldpath);

            FieldIdentifier field = FieldIdentifier.Create<object>(exp);
            return field.FieldName;
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }
}